{"ast":null,"code":"import _slicedToArray from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { jsx } from 'react/jsx-runtime';\nimport { useContext, Component } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\nimport { microtask } from '../../../frameloop/microtask.mjs';\nimport { frame } from '../../../frameloop/frame.mjs';\n\nvar MeasureLayoutWithContext = /*#__PURE__*/function (_Component) {\n  _inherits(MeasureLayoutWithContext, _Component);\n\n  var _super = _createSuper(MeasureLayoutWithContext);\n\n  function MeasureLayoutWithContext() {\n    _classCallCheck(this, MeasureLayoutWithContext);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MeasureLayoutWithContext, [{\n    key: \"componentDidMount\",\n    value:\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    function componentDidMount() {\n      var _this = this;\n\n      var _this$props = this.props,\n          visualElement = _this$props.visualElement,\n          layoutGroup = _this$props.layoutGroup,\n          switchLayoutGroup = _this$props.switchLayoutGroup,\n          layoutId = _this$props.layoutId;\n      var projection = visualElement.projection;\n      addScaleCorrector(defaultScaleCorrectors);\n\n      if (projection) {\n        if (layoutGroup.group) layoutGroup.group.add(projection);\n\n        if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n          switchLayoutGroup.register(projection);\n        }\n\n        projection.root.didUpdate();\n        projection.addEventListener(\"animationComplete\", function () {\n          _this.safeToRemove();\n        });\n        projection.setOptions(_objectSpread(_objectSpread({}, projection.options), {}, {\n          onExitComplete: function onExitComplete() {\n            return _this.safeToRemove();\n          }\n        }));\n      }\n\n      globalProjectionState.hasEverUpdated = true;\n    }\n  }, {\n    key: \"getSnapshotBeforeUpdate\",\n    value: function getSnapshotBeforeUpdate(prevProps) {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          layoutDependency = _this$props2.layoutDependency,\n          visualElement = _this$props2.visualElement,\n          drag = _this$props2.drag,\n          isPresent = _this$props2.isPresent;\n      var projection = visualElement.projection;\n      if (!projection) return null;\n      /**\n       * TODO: We use this data in relegate to determine whether to\n       * promote a previous element. There's no guarantee its presence data\n       * will have updated by this point - if a bug like this arises it will\n       * have to be that we markForRelegation and then find a new lead some other way,\n       * perhaps in didUpdate\n       */\n\n      projection.isPresent = isPresent;\n\n      if (drag || prevProps.layoutDependency !== layoutDependency || layoutDependency === undefined) {\n        projection.willUpdate();\n      } else {\n        this.safeToRemove();\n      }\n\n      if (prevProps.isPresent !== isPresent) {\n        if (isPresent) {\n          projection.promote();\n        } else if (!projection.relegate()) {\n          /**\n           * If there's another stack member taking over from this one,\n           * it's in charge of the exit animation and therefore should\n           * be in charge of the safe to remove. Otherwise we call it here.\n           */\n          frame.postRender(function () {\n            var stack = projection.getStack();\n\n            if (!stack || !stack.members.length) {\n              _this2.safeToRemove();\n            }\n          });\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this3 = this;\n\n      var projection = this.props.visualElement.projection;\n\n      if (projection) {\n        projection.root.didUpdate();\n        microtask.postRender(function () {\n          if (!projection.currentAnimation && projection.isLead()) {\n            _this3.safeToRemove();\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$props3 = this.props,\n          visualElement = _this$props3.visualElement,\n          layoutGroup = _this$props3.layoutGroup,\n          promoteContext = _this$props3.switchLayoutGroup;\n      var projection = visualElement.projection;\n\n      if (projection) {\n        projection.scheduleCheckAfterUnmount();\n        if (layoutGroup && layoutGroup.group) layoutGroup.group.remove(projection);\n        if (promoteContext && promoteContext.deregister) promoteContext.deregister(projection);\n      }\n    }\n  }, {\n    key: \"safeToRemove\",\n    value: function safeToRemove() {\n      var safeToRemove = this.props.safeToRemove;\n      safeToRemove && safeToRemove();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return MeasureLayoutWithContext;\n}(Component);\n\nfunction MeasureLayout(props) {\n  var _usePresence = usePresence(),\n      _usePresence2 = _slicedToArray(_usePresence, 2),\n      isPresent = _usePresence2[0],\n      safeToRemove = _usePresence2[1];\n\n  var layoutGroup = useContext(LayoutGroupContext);\n  return jsx(MeasureLayoutWithContext, _objectSpread(_objectSpread({}, props), {}, {\n    layoutGroup: layoutGroup,\n    switchLayoutGroup: useContext(SwitchLayoutGroupContext),\n    isPresent: isPresent,\n    safeToRemove: safeToRemove\n  }));\n}\n\nvar defaultScaleCorrectors = {\n  borderRadius: _objectSpread(_objectSpread({}, correctBorderRadius), {}, {\n    applyTo: [\"borderTopLeftRadius\", \"borderTopRightRadius\", \"borderBottomLeftRadius\", \"borderBottomRightRadius\"]\n  }),\n  borderTopLeftRadius: correctBorderRadius,\n  borderTopRightRadius: correctBorderRadius,\n  borderBottomLeftRadius: correctBorderRadius,\n  borderBottomRightRadius: correctBorderRadius,\n  boxShadow: correctBoxShadow\n};\nexport { MeasureLayout };","map":null,"metadata":{},"sourceType":"module"}