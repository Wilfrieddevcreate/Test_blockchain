{"ast":null,"code":"import _classCallCheck from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\nvar thresholdNames = {\n  some: 0,\n  all: 1\n};\n\nvar InViewFeature = /*#__PURE__*/function (_Feature) {\n  _inherits(InViewFeature, _Feature);\n\n  var _super = _createSuper(InViewFeature);\n\n  function InViewFeature() {\n    var _this;\n\n    _classCallCheck(this, InViewFeature);\n\n    _this = _super.apply(this, arguments);\n    _this.hasEnteredView = false;\n    _this.isInView = false;\n    return _this;\n  }\n\n  _createClass(InViewFeature, [{\n    key: \"startObserver\",\n    value: function startObserver() {\n      var _this2 = this;\n\n      this.unmount();\n\n      var _this$node$getProps = this.node.getProps(),\n          _this$node$getProps$v = _this$node$getProps.viewport,\n          viewport = _this$node$getProps$v === void 0 ? {} : _this$node$getProps$v;\n\n      var root = viewport.root,\n          rootMargin = viewport.margin,\n          _viewport$amount = viewport.amount,\n          amount = _viewport$amount === void 0 ? \"some\" : _viewport$amount,\n          once = viewport.once;\n      var options = {\n        root: root ? root.current : undefined,\n        rootMargin: rootMargin,\n        threshold: typeof amount === \"number\" ? amount : thresholdNames[amount]\n      };\n\n      var onIntersectionUpdate = function onIntersectionUpdate(entry) {\n        var isIntersecting = entry.isIntersecting;\n        /**\n         * If there's been no change in the viewport state, early return.\n         */\n\n        if (_this2.isInView === isIntersecting) return;\n        _this2.isInView = isIntersecting;\n        /**\n         * Handle hasEnteredView. If this is only meant to run once, and\n         * element isn't visible, early return. Otherwise set hasEnteredView to true.\n         */\n\n        if (once && !isIntersecting && _this2.hasEnteredView) {\n          return;\n        } else if (isIntersecting) {\n          _this2.hasEnteredView = true;\n        }\n\n        if (_this2.node.animationState) {\n          _this2.node.animationState.setActive(\"whileInView\", isIntersecting);\n        }\n        /**\n         * Use the latest committed props rather than the ones in scope\n         * when this observer is created\n         */\n\n\n        var _this2$node$getProps = _this2.node.getProps(),\n            onViewportEnter = _this2$node$getProps.onViewportEnter,\n            onViewportLeave = _this2$node$getProps.onViewportLeave;\n\n        var callback = isIntersecting ? onViewportEnter : onViewportLeave;\n        callback && callback(entry);\n      };\n\n      return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n  }, {\n    key: \"mount\",\n    value: function mount() {\n      this.startObserver();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (typeof IntersectionObserver === \"undefined\") return;\n      var _this$node = this.node,\n          props = _this$node.props,\n          prevProps = _this$node.prevProps;\n      var hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n\n      if (hasOptionsChanged) {\n        this.startObserver();\n      }\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {}\n  }]);\n\n  return InViewFeature;\n}(Feature);\n\nfunction hasViewportOptionChanged(_ref) {\n  var _ref$viewport = _ref.viewport,\n      viewport = _ref$viewport === void 0 ? {} : _ref$viewport;\n\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref2$viewport = _ref2.viewport,\n      prevViewport = _ref2$viewport === void 0 ? {} : _ref2$viewport;\n\n  return function (name) {\n    return viewport[name] !== prevViewport[name];\n  };\n}\n\nexport { InViewFeature };","map":null,"metadata":{},"sourceType":"module"}