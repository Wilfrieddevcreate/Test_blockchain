{"ast":null,"code":"import { transformPropOrder } from '../../html/utils/transform.mjs';\nimport { number } from '../../../value/types/numbers/index.mjs';\nimport { px } from '../../../value/types/numbers/units.mjs';\nvar positionalKeys = new Set([\"width\", \"height\", \"top\", \"left\", \"right\", \"bottom\", \"x\", \"y\", \"translateX\", \"translateY\"]);\n\nvar isNumOrPxType = function isNumOrPxType(v) {\n  return v === number || v === px;\n};\n\nvar getPosFromMatrix = function getPosFromMatrix(matrix, pos) {\n  return parseFloat(matrix.split(\", \")[pos]);\n};\n\nvar getTranslateFromMatrix = function getTranslateFromMatrix(pos2, pos3) {\n  return function (_bbox, _ref) {\n    var transform = _ref.transform;\n    if (transform === \"none\" || !transform) return 0;\n    var matrix3d = transform.match(/^matrix3d\\(((?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)\\)$/);\n\n    if (matrix3d) {\n      return getPosFromMatrix(matrix3d[1], pos3);\n    } else {\n      var matrix = transform.match(/^matrix\\(((?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)\\)$/);\n\n      if (matrix) {\n        return getPosFromMatrix(matrix[1], pos2);\n      } else {\n        return 0;\n      }\n    }\n  };\n};\n\nvar transformKeys = new Set([\"x\", \"y\", \"z\"]);\nvar nonTranslationalTransformKeys = transformPropOrder.filter(function (key) {\n  return !transformKeys.has(key);\n});\n\nfunction removeNonTranslationalTransform(visualElement) {\n  var removedTransforms = [];\n  nonTranslationalTransformKeys.forEach(function (key) {\n    var value = visualElement.getValue(key);\n\n    if (value !== undefined) {\n      removedTransforms.push([key, value.get()]);\n      value.set(key.startsWith(\"scale\") ? 1 : 0);\n    }\n  });\n  return removedTransforms;\n}\n\nvar positionalValues = {\n  // Dimensions\n  width: function width(_ref2, _ref3) {\n    var x = _ref2.x;\n    var _ref3$paddingLeft = _ref3.paddingLeft,\n        paddingLeft = _ref3$paddingLeft === void 0 ? \"0\" : _ref3$paddingLeft,\n        _ref3$paddingRight = _ref3.paddingRight,\n        paddingRight = _ref3$paddingRight === void 0 ? \"0\" : _ref3$paddingRight;\n    return x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight);\n  },\n  height: function height(_ref4, _ref5) {\n    var y = _ref4.y;\n    var _ref5$paddingTop = _ref5.paddingTop,\n        paddingTop = _ref5$paddingTop === void 0 ? \"0\" : _ref5$paddingTop,\n        _ref5$paddingBottom = _ref5.paddingBottom,\n        paddingBottom = _ref5$paddingBottom === void 0 ? \"0\" : _ref5$paddingBottom;\n    return y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom);\n  },\n  top: function top(_bbox, _ref6) {\n    var _top = _ref6.top;\n    return parseFloat(_top);\n  },\n  left: function left(_bbox, _ref7) {\n    var _left = _ref7.left;\n    return parseFloat(_left);\n  },\n  bottom: function bottom(_ref8, _ref9) {\n    var y = _ref8.y;\n    var top = _ref9.top;\n    return parseFloat(top) + (y.max - y.min);\n  },\n  right: function right(_ref10, _ref11) {\n    var x = _ref10.x;\n    var left = _ref11.left;\n    return parseFloat(left) + (x.max - x.min);\n  },\n  // Transform\n  x: getTranslateFromMatrix(4, 13),\n  y: getTranslateFromMatrix(5, 14)\n}; // Alias translate longform names\n\npositionalValues.translateX = positionalValues.x;\npositionalValues.translateY = positionalValues.y;\nexport { isNumOrPxType, positionalKeys, positionalValues, removeNonTranslationalTransform };","map":null,"metadata":{},"sourceType":"module"}