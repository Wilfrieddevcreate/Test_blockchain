{"ast":null,"code":"import _objectSpread from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { invariant } from '../../utils/errors.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, calcViewportConstraints, rebaseAxisConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\nvar elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\n\nvar VisualElementDragControls = /*#__PURE__*/function () {\n  function VisualElementDragControls(visualElement) {\n    _classCallCheck(this, VisualElementDragControls);\n\n    // This is a reference to the global drag gesture lock, ensuring only one component\n    // can \"capture\" the drag of one or both axes.\n    // TODO: Look into moving this into pansession?\n    this.openGlobalLock = null;\n    this.isDragging = false;\n    this.currentDirection = null;\n    this.originPoint = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * The permitted boundaries of travel, in pixels.\n     */\n\n    this.constraints = false;\n    this.hasMutatedConstraints = false;\n    /**\n     * The per-axis resolved elastic values.\n     */\n\n    this.elastic = createBox();\n    this.visualElement = visualElement;\n  }\n\n  _createClass(VisualElementDragControls, [{\n    key: \"start\",\n    value: function start(originEvent) {\n      var _this = this;\n\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref$snapToCursor = _ref.snapToCursor,\n          snapToCursor = _ref$snapToCursor === void 0 ? false : _ref$snapToCursor;\n\n      /**\n       * Don't start dragging if this component is exiting\n       */\n      var presenceContext = this.visualElement.presenceContext;\n      if (presenceContext && presenceContext.isPresent === false) return;\n\n      var onSessionStart = function onSessionStart(event) {\n        var _this$getProps = _this.getProps(),\n            dragSnapToOrigin = _this$getProps.dragSnapToOrigin; // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n        // the component.\n\n\n        dragSnapToOrigin ? _this.pauseAnimation() : _this.stopAnimation();\n\n        if (snapToCursor) {\n          _this.snapToCursor(extractEventInfo(event, \"page\").point);\n        }\n      };\n\n      var onStart = function onStart(event, info) {\n        // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n        var _this$getProps2 = _this.getProps(),\n            drag = _this$getProps2.drag,\n            dragPropagation = _this$getProps2.dragPropagation,\n            onDragStart = _this$getProps2.onDragStart;\n\n        if (drag && !dragPropagation) {\n          if (_this.openGlobalLock) _this.openGlobalLock();\n          _this.openGlobalLock = getGlobalLock(drag); // If we don 't have the lock, don't start dragging\n\n          if (!_this.openGlobalLock) return;\n        }\n\n        _this.isDragging = true;\n        _this.currentDirection = null;\n\n        _this.resolveConstraints();\n\n        if (_this.visualElement.projection) {\n          _this.visualElement.projection.isAnimationBlocked = true;\n          _this.visualElement.projection.target = undefined;\n        }\n        /**\n         * Record gesture origin\n         */\n\n\n        eachAxis(function (axis) {\n          var current = _this.getAxisMotionValue(axis).get() || 0;\n          /**\n           * If the MotionValue is a percentage value convert to px\n           */\n\n          if (percent.test(current)) {\n            var projection = _this.visualElement.projection;\n\n            if (projection && projection.layout) {\n              var measuredAxis = projection.layout.layoutBox[axis];\n\n              if (measuredAxis) {\n                var length = calcLength(measuredAxis);\n                current = length * (parseFloat(current) / 100);\n              }\n            }\n          }\n\n          _this.originPoint[axis] = current;\n        }); // Fire onDragStart event\n\n        if (onDragStart) {\n          frame.postRender(function () {\n            return onDragStart(event, info);\n          });\n        }\n\n        var animationState = _this.visualElement.animationState;\n        animationState && animationState.setActive(\"whileDrag\", true);\n      };\n\n      var onMove = function onMove(event, info) {\n        // latestPointerEvent = event\n        var _this$getProps3 = _this.getProps(),\n            dragPropagation = _this$getProps3.dragPropagation,\n            dragDirectionLock = _this$getProps3.dragDirectionLock,\n            onDirectionLock = _this$getProps3.onDirectionLock,\n            onDrag = _this$getProps3.onDrag; // If we didn't successfully receive the gesture lock, early return.\n\n\n        if (!dragPropagation && !_this.openGlobalLock) return;\n        var offset = info.offset; // Attempt to detect drag direction if directionLock is true\n\n        if (dragDirectionLock && _this.currentDirection === null) {\n          _this.currentDirection = getCurrentDirection(offset); // If we've successfully set a direction, notify listener\n\n          if (_this.currentDirection !== null) {\n            onDirectionLock && onDirectionLock(_this.currentDirection);\n          }\n\n          return;\n        } // Update each point with the latest position\n\n\n        _this.updateAxis(\"x\", info.point, offset);\n\n        _this.updateAxis(\"y\", info.point, offset);\n        /**\n         * Ideally we would leave the renderer to fire naturally at the end of\n         * this frame but if the element is about to change layout as the result\n         * of a re-render we want to ensure the browser can read the latest\n         * bounding box to ensure the pointer and element don't fall out of sync.\n         */\n\n\n        _this.visualElement.render();\n        /**\n         * This must fire after the render call as it might trigger a state\n         * change which itself might trigger a layout update.\n         */\n\n\n        onDrag && onDrag(event, info);\n      };\n\n      var onSessionEnd = function onSessionEnd(event, info) {\n        return _this.stop(event, info);\n      };\n\n      var resumeAnimation = function resumeAnimation() {\n        return eachAxis(function (axis) {\n          var _a;\n\n          return _this.getAnimationState(axis) === \"paused\" && ((_a = _this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.play());\n        });\n      };\n\n      var _this$getProps4 = this.getProps(),\n          dragSnapToOrigin = _this$getProps4.dragSnapToOrigin;\n\n      this.panSession = new PanSession(originEvent, {\n        onSessionStart: onSessionStart,\n        onStart: onStart,\n        onMove: onMove,\n        onSessionEnd: onSessionEnd,\n        resumeAnimation: resumeAnimation\n      }, {\n        transformPagePoint: this.visualElement.getTransformPagePoint(),\n        dragSnapToOrigin: dragSnapToOrigin,\n        contextWindow: getContextWindow(this.visualElement)\n      });\n    }\n  }, {\n    key: \"stop\",\n    value: function stop(event, info) {\n      var isDragging = this.isDragging;\n      this.cancel();\n      if (!isDragging) return;\n      var velocity = info.velocity;\n      this.startAnimation(velocity);\n\n      var _this$getProps5 = this.getProps(),\n          onDragEnd = _this$getProps5.onDragEnd;\n\n      if (onDragEnd) {\n        frame.postRender(function () {\n          return onDragEnd(event, info);\n        });\n      }\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this.isDragging = false;\n      var _this$visualElement = this.visualElement,\n          projection = _this$visualElement.projection,\n          animationState = _this$visualElement.animationState;\n\n      if (projection) {\n        projection.isAnimationBlocked = false;\n      }\n\n      this.panSession && this.panSession.end();\n      this.panSession = undefined;\n\n      var _this$getProps6 = this.getProps(),\n          dragPropagation = _this$getProps6.dragPropagation;\n\n      if (!dragPropagation && this.openGlobalLock) {\n        this.openGlobalLock();\n        this.openGlobalLock = null;\n      }\n\n      animationState && animationState.setActive(\"whileDrag\", false);\n    }\n  }, {\n    key: \"updateAxis\",\n    value: function updateAxis(axis, _point, offset) {\n      var _this$getProps7 = this.getProps(),\n          drag = _this$getProps7.drag; // If we're not dragging this axis, do an early return.\n\n\n      if (!offset || !shouldDrag(axis, drag, this.currentDirection)) return;\n      var axisValue = this.getAxisMotionValue(axis);\n      var next = this.originPoint[axis] + offset[axis]; // Apply constraints\n\n      if (this.constraints && this.constraints[axis]) {\n        next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n      }\n\n      axisValue.set(next);\n    }\n  }, {\n    key: \"resolveConstraints\",\n    value: function resolveConstraints() {\n      var _this2 = this;\n\n      var _a;\n\n      var _this$getProps8 = this.getProps(),\n          dragConstraints = _this$getProps8.dragConstraints,\n          dragElastic = _this$getProps8.dragElastic;\n\n      var layout = this.visualElement.projection && !this.visualElement.projection.layout ? this.visualElement.projection.measure(false) : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;\n      var prevConstraints = this.constraints;\n\n      if (dragConstraints && isRefObject(dragConstraints)) {\n        if (!this.constraints) {\n          this.constraints = this.resolveRefConstraints();\n        }\n      } else {\n        if (dragConstraints && layout) {\n          this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n        } else {\n          this.constraints = false;\n        }\n      }\n\n      this.elastic = resolveDragElastic(dragElastic);\n      /**\n       * If we're outputting to external MotionValues, we want to rebase the measured constraints\n       * from viewport-relative to component-relative.\n       */\n\n      if (prevConstraints !== this.constraints && layout && this.constraints && !this.hasMutatedConstraints) {\n        eachAxis(function (axis) {\n          if (_this2.constraints !== false && _this2.getAxisMotionValue(axis)) {\n            _this2.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], _this2.constraints[axis]);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"resolveRefConstraints\",\n    value: function resolveRefConstraints() {\n      var _this$getProps9 = this.getProps(),\n          constraints = _this$getProps9.dragConstraints,\n          onMeasureDragConstraints = _this$getProps9.onMeasureDragConstraints;\n\n      if (!constraints || !isRefObject(constraints)) return false;\n      var constraintsElement = constraints.current;\n      invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n      var projection = this.visualElement.projection; // TODO\n\n      if (!projection || !projection.layout) return false;\n      var constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n      var measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n      /**\n       * If there's an onMeasureDragConstraints listener we call it and\n       * if different constraints are returned, set constraints to that\n       */\n\n      if (onMeasureDragConstraints) {\n        var userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n        this.hasMutatedConstraints = !!userConstraints;\n\n        if (userConstraints) {\n          measuredConstraints = convertBoundingBoxToBox(userConstraints);\n        }\n      }\n\n      return measuredConstraints;\n    }\n  }, {\n    key: \"startAnimation\",\n    value: function startAnimation(velocity) {\n      var _this3 = this;\n\n      var _this$getProps10 = this.getProps(),\n          drag = _this$getProps10.drag,\n          dragMomentum = _this$getProps10.dragMomentum,\n          dragElastic = _this$getProps10.dragElastic,\n          dragTransition = _this$getProps10.dragTransition,\n          dragSnapToOrigin = _this$getProps10.dragSnapToOrigin,\n          onDragTransitionEnd = _this$getProps10.onDragTransitionEnd;\n\n      var constraints = this.constraints || {};\n      var momentumAnimations = eachAxis(function (axis) {\n        if (!shouldDrag(axis, drag, _this3.currentDirection)) {\n          return;\n        }\n\n        var transition = constraints && constraints[axis] || {};\n        if (dragSnapToOrigin) transition = {\n          min: 0,\n          max: 0\n        };\n        /**\n         * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n         * of spring animations so we should look into adding a disable spring option to `inertia`.\n         * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n         * using the value of `dragElastic`.\n         */\n\n        var bounceStiffness = dragElastic ? 200 : 1000000;\n        var bounceDamping = dragElastic ? 40 : 10000000;\n\n        var inertia = _objectSpread(_objectSpread({\n          type: \"inertia\",\n          velocity: dragMomentum ? velocity[axis] : 0,\n          bounceStiffness: bounceStiffness,\n          bounceDamping: bounceDamping,\n          timeConstant: 750,\n          restDelta: 1,\n          restSpeed: 10\n        }, dragTransition), transition); // If we're not animating on an externally-provided `MotionValue` we can use the\n        // component's animation controls which will handle interactions with whileHover (etc),\n        // otherwise we just have to animate the `MotionValue` itself.\n\n\n        return _this3.startAxisValueAnimation(axis, inertia);\n      }); // Run all animations and then resolve the new drag constraints.\n\n      return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n  }, {\n    key: \"startAxisValueAnimation\",\n    value: function startAxisValueAnimation(axis, transition) {\n      var axisValue = this.getAxisMotionValue(axis);\n      return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement));\n    }\n  }, {\n    key: \"stopAnimation\",\n    value: function stopAnimation() {\n      var _this4 = this;\n\n      eachAxis(function (axis) {\n        return _this4.getAxisMotionValue(axis).stop();\n      });\n    }\n  }, {\n    key: \"pauseAnimation\",\n    value: function pauseAnimation() {\n      var _this5 = this;\n\n      eachAxis(function (axis) {\n        var _a;\n\n        return (_a = _this5.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.pause();\n      });\n    }\n  }, {\n    key: \"getAnimationState\",\n    value: function getAnimationState(axis) {\n      var _a;\n\n      return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.state;\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n\n  }, {\n    key: \"getAxisMotionValue\",\n    value: function getAxisMotionValue(axis) {\n      var dragKey = \"_drag\".concat(axis.toUpperCase());\n      var props = this.visualElement.getProps();\n      var externalMotionValue = props[dragKey];\n      return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n  }, {\n    key: \"snapToCursor\",\n    value: function snapToCursor(point) {\n      var _this6 = this;\n\n      eachAxis(function (axis) {\n        var _this6$getProps = _this6.getProps(),\n            drag = _this6$getProps.drag; // If we're not dragging this axis, do an early return.\n\n\n        if (!shouldDrag(axis, drag, _this6.currentDirection)) return;\n        var projection = _this6.visualElement.projection;\n\n        var axisValue = _this6.getAxisMotionValue(axis);\n\n        if (projection && projection.layout) {\n          var _projection$layout$la = projection.layout.layoutBox[axis],\n              min = _projection$layout$la.min,\n              max = _projection$layout$la.max;\n          axisValue.set(point[axis] - mixNumber(min, max, 0.5));\n        }\n      });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n\n  }, {\n    key: \"scalePositionWithinConstraints\",\n    value: function scalePositionWithinConstraints() {\n      var _this7 = this;\n\n      if (!this.visualElement.current) return;\n\n      var _this$getProps11 = this.getProps(),\n          drag = _this$getProps11.drag,\n          dragConstraints = _this$getProps11.dragConstraints;\n\n      var projection = this.visualElement.projection;\n      if (!isRefObject(dragConstraints) || !projection || !this.constraints) return;\n      /**\n       * Stop current animations as there can be visual glitching if we try to do\n       * this mid-animation\n       */\n\n      this.stopAnimation();\n      /**\n       * Record the relative position of the dragged element relative to the\n       * constraints box and save as a progress value.\n       */\n\n      var boxProgress = {\n        x: 0,\n        y: 0\n      };\n      eachAxis(function (axis) {\n        var axisValue = _this7.getAxisMotionValue(axis);\n\n        if (axisValue && _this7.constraints !== false) {\n          var latest = axisValue.get();\n          boxProgress[axis] = calcOrigin({\n            min: latest,\n            max: latest\n          }, _this7.constraints[axis]);\n        }\n      });\n      /**\n       * Update the layout of this element and resolve the latest drag constraints\n       */\n\n      var _this$visualElement$g = this.visualElement.getProps(),\n          transformTemplate = _this$visualElement$g.transformTemplate;\n\n      this.visualElement.current.style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n      projection.root && projection.root.updateScroll();\n      projection.updateLayout();\n      this.resolveConstraints();\n      /**\n       * For each axis, calculate the current progress of the layout axis\n       * within the new constraints.\n       */\n\n      eachAxis(function (axis) {\n        if (!shouldDrag(axis, drag, null)) return;\n        /**\n         * Calculate a new transform based on the previous box progress\n         */\n\n        var axisValue = _this7.getAxisMotionValue(axis);\n\n        var _this7$constraints$ax = _this7.constraints[axis],\n            min = _this7$constraints$ax.min,\n            max = _this7$constraints$ax.max;\n        axisValue.set(mixNumber(min, max, boxProgress[axis]));\n      });\n    }\n  }, {\n    key: \"addListeners\",\n    value: function addListeners() {\n      var _this8 = this;\n\n      if (!this.visualElement.current) return;\n      elementDragControls.set(this.visualElement, this);\n      var element = this.visualElement.current;\n      /**\n       * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n       */\n\n      var stopPointerListener = addPointerEvent(element, \"pointerdown\", function (event) {\n        var _this8$getProps = _this8.getProps(),\n            drag = _this8$getProps.drag,\n            _this8$getProps$dragL = _this8$getProps.dragListener,\n            dragListener = _this8$getProps$dragL === void 0 ? true : _this8$getProps$dragL;\n\n        drag && dragListener && _this8.start(event);\n      });\n\n      var measureDragConstraints = function measureDragConstraints() {\n        var _this8$getProps2 = _this8.getProps(),\n            dragConstraints = _this8$getProps2.dragConstraints;\n\n        if (isRefObject(dragConstraints)) {\n          _this8.constraints = _this8.resolveRefConstraints();\n        }\n      };\n\n      var projection = this.visualElement.projection;\n      var stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n\n      if (projection && !projection.layout) {\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n      }\n\n      measureDragConstraints();\n      /**\n       * Attach a window resize listener to scale the draggable target within its defined\n       * constraints as the window resizes.\n       */\n\n      var stopResizeListener = addDomEvent(window, \"resize\", function () {\n        return _this8.scalePositionWithinConstraints();\n      });\n      /**\n       * If the element's layout changes, calculate the delta and apply that to\n       * the drag gesture's origin point.\n       */\n\n      var stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", function (_ref2) {\n        var delta = _ref2.delta,\n            hasLayoutChanged = _ref2.hasLayoutChanged;\n\n        if (_this8.isDragging && hasLayoutChanged) {\n          eachAxis(function (axis) {\n            var motionValue = _this8.getAxisMotionValue(axis);\n\n            if (!motionValue) return;\n            _this8.originPoint[axis] += delta[axis].translate;\n            motionValue.set(motionValue.get() + delta[axis].translate);\n          });\n\n          _this8.visualElement.render();\n        }\n      });\n      return function () {\n        stopResizeListener();\n        stopPointerListener();\n        stopMeasureLayoutListener();\n        stopLayoutUpdateListener && stopLayoutUpdateListener();\n      };\n    }\n  }, {\n    key: \"getProps\",\n    value: function getProps() {\n      var props = this.visualElement.getProps();\n      var _props$drag = props.drag,\n          drag = _props$drag === void 0 ? false : _props$drag,\n          _props$dragDirectionL = props.dragDirectionLock,\n          dragDirectionLock = _props$dragDirectionL === void 0 ? false : _props$dragDirectionL,\n          _props$dragPropagatio = props.dragPropagation,\n          dragPropagation = _props$dragPropagatio === void 0 ? false : _props$dragPropagatio,\n          _props$dragConstraint = props.dragConstraints,\n          dragConstraints = _props$dragConstraint === void 0 ? false : _props$dragConstraint,\n          _props$dragElastic = props.dragElastic,\n          dragElastic = _props$dragElastic === void 0 ? defaultElastic : _props$dragElastic,\n          _props$dragMomentum = props.dragMomentum,\n          dragMomentum = _props$dragMomentum === void 0 ? true : _props$dragMomentum;\n      return _objectSpread(_objectSpread({}, props), {}, {\n        drag: drag,\n        dragDirectionLock: dragDirectionLock,\n        dragPropagation: dragPropagation,\n        dragConstraints: dragConstraints,\n        dragElastic: dragElastic,\n        dragMomentum: dragMomentum\n      });\n    }\n  }]);\n\n  return VisualElementDragControls;\n}();\n\nfunction shouldDrag(direction, drag, currentDirection) {\n  return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\n\n\nfunction getCurrentDirection(offset) {\n  var lockThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  var direction = null;\n\n  if (Math.abs(offset.y) > lockThreshold) {\n    direction = \"y\";\n  } else if (Math.abs(offset.x) > lockThreshold) {\n    direction = \"x\";\n  }\n\n  return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };","map":null,"metadata":{},"sourceType":"module"}