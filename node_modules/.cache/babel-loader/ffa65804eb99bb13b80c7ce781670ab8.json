{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _wrapAsyncGenerator from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _awaitAsyncGenerator from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _asyncGeneratorDelegate from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _asyncIterator from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\wilfr\\\\OneDrive\\\\Documents\\\\maxitapbotlatestversionv2\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nexport var streamChunk = /*#__PURE__*/_regeneratorRuntime.mark(function streamChunk(chunk, chunkSize) {\n  var len, pos, end;\n  return _regeneratorRuntime.wrap(function streamChunk$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          len = chunk.byteLength;\n\n          if (!(!chunkSize || len < chunkSize)) {\n            _context.next = 5;\n            break;\n          }\n\n          _context.next = 4;\n          return chunk;\n\n        case 4:\n          return _context.abrupt(\"return\");\n\n        case 5:\n          pos = 0;\n\n        case 6:\n          if (!(pos < len)) {\n            _context.next = 13;\n            break;\n          }\n\n          end = pos + chunkSize;\n          _context.next = 10;\n          return chunk.slice(pos, end);\n\n        case 10:\n          pos = end;\n          _context.next = 6;\n          break;\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, streamChunk);\n});\nexport var readBytes = /*#__PURE__*/function () {\n  var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(iterable, chunkSize, encode) {\n    var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context2.prev = 2;\n            _iterator = _asyncIterator(iterable);\n\n          case 4:\n            _context2.next = 6;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 6:\n            if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n              _context2.next = 27;\n              break;\n            }\n\n            chunk = _step.value;\n            _context2.t0 = _asyncGeneratorDelegate;\n            _context2.t1 = _asyncIterator;\n            _context2.t2 = streamChunk;\n\n            if (!ArrayBuffer.isView(chunk)) {\n              _context2.next = 15;\n              break;\n            }\n\n            _context2.t3 = chunk;\n            _context2.next = 18;\n            break;\n\n          case 15:\n            _context2.next = 17;\n            return _awaitAsyncGenerator(encode(String(chunk)));\n\n          case 17:\n            _context2.t3 = _context2.sent;\n\n          case 18:\n            _context2.t4 = _context2.t3;\n            _context2.t5 = chunkSize;\n            _context2.t6 = (0, _context2.t2)(_context2.t4, _context2.t5);\n            _context2.t7 = (0, _context2.t1)(_context2.t6);\n            _context2.t8 = _awaitAsyncGenerator;\n            return _context2.delegateYield((0, _context2.t0)(_context2.t7, _context2.t8), \"t9\", 24);\n\n          case 24:\n            _iteratorAbruptCompletion = false;\n            _context2.next = 4;\n            break;\n\n          case 27:\n            _context2.next = 33;\n            break;\n\n          case 29:\n            _context2.prev = 29;\n            _context2.t10 = _context2[\"catch\"](2);\n            _didIteratorError = true;\n            _iteratorError = _context2.t10;\n\n          case 33:\n            _context2.prev = 33;\n            _context2.prev = 34;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context2.next = 38;\n              break;\n            }\n\n            _context2.next = 38;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 38:\n            _context2.prev = 38;\n\n            if (!_didIteratorError) {\n              _context2.next = 41;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 41:\n            return _context2.finish(38);\n\n          case 42:\n            return _context2.finish(33);\n\n          case 43:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee, null, [[2, 29, 33, 43], [34,, 38, 42]]);\n  }));\n\n  return function readBytes(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var trackStream = function trackStream(stream, chunkSize, onProgress, onFinish, encode) {\n  var iterator = readBytes(stream, chunkSize, encode);\n  var bytes = 0;\n  return new ReadableStream({\n    type: 'bytes',\n    pull: function pull(controller) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _yield$iterator$next, done, value, len;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return iterator.next();\n\n              case 2:\n                _yield$iterator$next = _context3.sent;\n                done = _yield$iterator$next.done;\n                value = _yield$iterator$next.value;\n\n                if (!done) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                controller.close();\n                onFinish();\n                return _context3.abrupt(\"return\");\n\n              case 9:\n                len = value.byteLength;\n                onProgress && onProgress(bytes += len);\n                controller.enqueue(new Uint8Array(value));\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    cancel: function cancel(reason) {\n      onFinish(reason);\n      return iterator.return();\n    }\n  }, {\n    highWaterMark: 2\n  });\n};","map":null,"metadata":{},"sourceType":"module"}