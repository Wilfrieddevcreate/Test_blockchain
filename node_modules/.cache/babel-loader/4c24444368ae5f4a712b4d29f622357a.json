{"ast":null,"code":"import _classCallCheck from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction addHoverEvent(node, isActive) {\n  var eventName = isActive ? \"pointerenter\" : \"pointerleave\";\n  var callbackName = isActive ? \"onHoverStart\" : \"onHoverEnd\";\n\n  var handleEvent = function handleEvent(event, info) {\n    if (event.pointerType === \"touch\" || isDragActive()) return;\n    var props = node.getProps();\n\n    if (node.animationState && props.whileHover) {\n      node.animationState.setActive(\"whileHover\", isActive);\n    }\n\n    var callback = props[callbackName];\n\n    if (callback) {\n      frame.postRender(function () {\n        return callback(event, info);\n      });\n    }\n  };\n\n  return addPointerEvent(node.current, eventName, handleEvent, {\n    passive: !node.getProps()[callbackName]\n  });\n}\n\nvar HoverGesture = /*#__PURE__*/function (_Feature) {\n  _inherits(HoverGesture, _Feature);\n\n  var _super = _createSuper(HoverGesture);\n\n  function HoverGesture() {\n    _classCallCheck(this, HoverGesture);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(HoverGesture, [{\n    key: \"mount\",\n    value: function mount() {\n      this.unmount = pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {}\n  }]);\n\n  return HoverGesture;\n}(Feature);\n\nexport { HoverGesture };","map":null,"metadata":{},"sourceType":"module"}