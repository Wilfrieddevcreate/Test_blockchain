{"ast":null,"code":"import _slicedToArray from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport nacl from 'tweetnacl-util';\nimport nacl$1 from 'tweetnacl';\nvar CONNECT_EVENT_ERROR_CODES;\n\n(function (CONNECT_EVENT_ERROR_CODES) {\n  CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES[\"UNKNOWN_ERROR\"] = 0] = \"UNKNOWN_ERROR\";\n  CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES[\"BAD_REQUEST_ERROR\"] = 1] = \"BAD_REQUEST_ERROR\";\n  CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES[\"MANIFEST_NOT_FOUND_ERROR\"] = 2] = \"MANIFEST_NOT_FOUND_ERROR\";\n  CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES[\"MANIFEST_CONTENT_ERROR\"] = 3] = \"MANIFEST_CONTENT_ERROR\";\n  CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES[\"UNKNOWN_APP_ERROR\"] = 100] = \"UNKNOWN_APP_ERROR\";\n  CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES[\"USER_REJECTS_ERROR\"] = 300] = \"USER_REJECTS_ERROR\";\n  CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES[\"METHOD_NOT_SUPPORTED\"] = 400] = \"METHOD_NOT_SUPPORTED\";\n})(CONNECT_EVENT_ERROR_CODES || (CONNECT_EVENT_ERROR_CODES = {}));\n\nvar CONNECT_ITEM_ERROR_CODES;\n\n(function (CONNECT_ITEM_ERROR_CODES) {\n  CONNECT_ITEM_ERROR_CODES[CONNECT_ITEM_ERROR_CODES[\"UNKNOWN_ERROR\"] = 0] = \"UNKNOWN_ERROR\";\n  CONNECT_ITEM_ERROR_CODES[CONNECT_ITEM_ERROR_CODES[\"METHOD_NOT_SUPPORTED\"] = 400] = \"METHOD_NOT_SUPPORTED\";\n})(CONNECT_ITEM_ERROR_CODES || (CONNECT_ITEM_ERROR_CODES = {}));\n\nvar SEND_TRANSACTION_ERROR_CODES;\n\n(function (SEND_TRANSACTION_ERROR_CODES) {\n  SEND_TRANSACTION_ERROR_CODES[SEND_TRANSACTION_ERROR_CODES[\"UNKNOWN_ERROR\"] = 0] = \"UNKNOWN_ERROR\";\n  SEND_TRANSACTION_ERROR_CODES[SEND_TRANSACTION_ERROR_CODES[\"BAD_REQUEST_ERROR\"] = 1] = \"BAD_REQUEST_ERROR\";\n  SEND_TRANSACTION_ERROR_CODES[SEND_TRANSACTION_ERROR_CODES[\"UNKNOWN_APP_ERROR\"] = 100] = \"UNKNOWN_APP_ERROR\";\n  SEND_TRANSACTION_ERROR_CODES[SEND_TRANSACTION_ERROR_CODES[\"USER_REJECTS_ERROR\"] = 300] = \"USER_REJECTS_ERROR\";\n  SEND_TRANSACTION_ERROR_CODES[SEND_TRANSACTION_ERROR_CODES[\"METHOD_NOT_SUPPORTED\"] = 400] = \"METHOD_NOT_SUPPORTED\";\n})(SEND_TRANSACTION_ERROR_CODES || (SEND_TRANSACTION_ERROR_CODES = {}));\n\nvar SIGN_DATA_ERROR_CODES;\n\n(function (SIGN_DATA_ERROR_CODES) {\n  SIGN_DATA_ERROR_CODES[SIGN_DATA_ERROR_CODES[\"UNKNOWN_ERROR\"] = 0] = \"UNKNOWN_ERROR\";\n  SIGN_DATA_ERROR_CODES[SIGN_DATA_ERROR_CODES[\"BAD_REQUEST_ERROR\"] = 1] = \"BAD_REQUEST_ERROR\";\n  SIGN_DATA_ERROR_CODES[SIGN_DATA_ERROR_CODES[\"UNKNOWN_APP_ERROR\"] = 100] = \"UNKNOWN_APP_ERROR\";\n  SIGN_DATA_ERROR_CODES[SIGN_DATA_ERROR_CODES[\"USER_REJECTS_ERROR\"] = 300] = \"USER_REJECTS_ERROR\";\n  SIGN_DATA_ERROR_CODES[SIGN_DATA_ERROR_CODES[\"METHOD_NOT_SUPPORTED\"] = 400] = \"METHOD_NOT_SUPPORTED\";\n})(SIGN_DATA_ERROR_CODES || (SIGN_DATA_ERROR_CODES = {}));\n\nvar DISCONNECT_ERROR_CODES;\n\n(function (DISCONNECT_ERROR_CODES) {\n  DISCONNECT_ERROR_CODES[DISCONNECT_ERROR_CODES[\"UNKNOWN_ERROR\"] = 0] = \"UNKNOWN_ERROR\";\n  DISCONNECT_ERROR_CODES[DISCONNECT_ERROR_CODES[\"BAD_REQUEST_ERROR\"] = 1] = \"BAD_REQUEST_ERROR\";\n  DISCONNECT_ERROR_CODES[DISCONNECT_ERROR_CODES[\"UNKNOWN_APP_ERROR\"] = 100] = \"UNKNOWN_APP_ERROR\";\n  DISCONNECT_ERROR_CODES[DISCONNECT_ERROR_CODES[\"METHOD_NOT_SUPPORTED\"] = 400] = \"METHOD_NOT_SUPPORTED\";\n})(DISCONNECT_ERROR_CODES || (DISCONNECT_ERROR_CODES = {}));\n\nvar CHAIN;\n\n(function (CHAIN) {\n  CHAIN[\"MAINNET\"] = \"-239\";\n  CHAIN[\"TESTNET\"] = \"-3\";\n})(CHAIN || (CHAIN = {}));\n\nfunction encodeUint8Array(value, urlSafe) {\n  var encoded = nacl.encodeBase64(value);\n\n  if (!urlSafe) {\n    return encoded;\n  }\n\n  return encodeURIComponent(encoded);\n}\n\nfunction decodeToUint8Array(value, urlSafe) {\n  if (urlSafe) {\n    value = decodeURIComponent(value);\n  }\n\n  return nacl.decodeBase64(value);\n}\n\nfunction encode(value) {\n  var urlSafe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var uint8Array;\n\n  if (value instanceof Uint8Array) {\n    uint8Array = value;\n  } else {\n    if (typeof value !== 'string') {\n      value = JSON.stringify(value);\n    }\n\n    uint8Array = nacl.decodeUTF8(value);\n  }\n\n  return encodeUint8Array(uint8Array, urlSafe);\n}\n\nfunction decode(value) {\n  var urlSafe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var decodedUint8Array = decodeToUint8Array(value, urlSafe);\n  return {\n    toString: function toString() {\n      return nacl.encodeUTF8(decodedUint8Array);\n    },\n    toObject: function toObject() {\n      try {\n        return JSON.parse(nacl.encodeUTF8(decodedUint8Array));\n      } catch (e) {\n        return null;\n      }\n    },\n    toUint8Array: function toUint8Array() {\n      return decodedUint8Array;\n    }\n  };\n}\n\nvar Base64 = {\n  encode: encode,\n  decode: decode\n};\n\nfunction concatUint8Arrays(buffer1, buffer2) {\n  var mergedArray = new Uint8Array(buffer1.length + buffer2.length);\n  mergedArray.set(buffer1);\n  mergedArray.set(buffer2, buffer1.length);\n  return mergedArray;\n}\n\nfunction splitToUint8Arrays(array, index) {\n  if (index >= array.length) {\n    throw new Error('Index is out of buffer');\n  }\n\n  var subArray1 = array.slice(0, index);\n  var subArray2 = array.slice(index);\n  return [subArray1, subArray2];\n}\n\nfunction toHexString(byteArray) {\n  var hexString = '';\n  byteArray.forEach(function (byte) {\n    hexString += ('0' + (byte & 0xff).toString(16)).slice(-2);\n  });\n  return hexString;\n}\n\nfunction hexToByteArray(hexString) {\n  if (hexString.length % 2 !== 0) {\n    throw new Error(\"Cannot convert \".concat(hexString, \" to bytesArray\"));\n  }\n\n  var result = new Uint8Array(hexString.length / 2);\n\n  for (var i = 0; i < hexString.length; i += 2) {\n    result[i / 2] = parseInt(hexString.slice(i, i + 2), 16);\n  }\n\n  return result;\n}\n\nfunction isNode() {\n  return typeof process !== 'undefined' && process.versions != null && process.versions.node != null;\n}\n\nvar SessionCrypto = /*#__PURE__*/function () {\n  function SessionCrypto(keyPair) {\n    _classCallCheck(this, SessionCrypto);\n\n    this.nonceLength = 24;\n    this.keyPair = keyPair ? this.createKeypairFromString(keyPair) : this.createKeypair();\n    this.sessionId = toHexString(this.keyPair.publicKey);\n  }\n\n  _createClass(SessionCrypto, [{\n    key: \"createKeypair\",\n    value: function createKeypair() {\n      return nacl$1.box.keyPair();\n    }\n  }, {\n    key: \"createKeypairFromString\",\n    value: function createKeypairFromString(keyPair) {\n      return {\n        publicKey: hexToByteArray(keyPair.publicKey),\n        secretKey: hexToByteArray(keyPair.secretKey)\n      };\n    }\n  }, {\n    key: \"createNonce\",\n    value: function createNonce() {\n      return nacl$1.randomBytes(this.nonceLength);\n    }\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(message, receiverPublicKey) {\n      var encodedMessage = new TextEncoder().encode(message);\n      var nonce = this.createNonce();\n      var encrypted = nacl$1.box(encodedMessage, nonce, receiverPublicKey, this.keyPair.secretKey);\n      return concatUint8Arrays(nonce, encrypted);\n    }\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(message, senderPublicKey) {\n      var _splitToUint8Arrays = splitToUint8Arrays(message, this.nonceLength),\n          _splitToUint8Arrays2 = _slicedToArray(_splitToUint8Arrays, 2),\n          nonce = _splitToUint8Arrays2[0],\n          internalMessage = _splitToUint8Arrays2[1];\n\n      var decrypted = nacl$1.box.open(internalMessage, nonce, senderPublicKey, this.keyPair.secretKey);\n\n      if (!decrypted) {\n        throw new Error(\"Decryption error: \\n message: \".concat(message.toString(), \" \\n sender pubkey: \").concat(senderPublicKey.toString(), \" \\n keypair pubkey: \").concat(this.keyPair.publicKey.toString(), \" \\n keypair secretkey: \").concat(this.keyPair.secretKey.toString()));\n      }\n\n      return new TextDecoder().decode(decrypted);\n    }\n  }, {\n    key: \"stringifyKeypair\",\n    value: function stringifyKeypair() {\n      return {\n        publicKey: toHexString(this.keyPair.publicKey),\n        secretKey: toHexString(this.keyPair.secretKey)\n      };\n    }\n  }]);\n\n  return SessionCrypto;\n}();\n\nexport { Base64, CHAIN, CONNECT_EVENT_ERROR_CODES, CONNECT_ITEM_ERROR_CODES, DISCONNECT_ERROR_CODES, SEND_TRANSACTION_ERROR_CODES, SIGN_DATA_ERROR_CODES, SessionCrypto, concatUint8Arrays, hexToByteArray, isNode, splitToUint8Arrays, toHexString }; //# sourceMappingURL=index.mjs.map","map":null,"metadata":{},"sourceType":"module"}