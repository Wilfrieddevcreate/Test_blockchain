{"ast":null,"code":"import _objectSpread from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"transition\", \"transitionEnd\"];\nimport { transformProps } from '../../render/html/utils/transform.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { getValueTransition } from '../utils/transitions.mjs';\nimport { getOptimisedAppearId } from '../optimized-appear/get-appear-id.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\n\nfunction shouldBlockAnimation(_ref, key) {\n  var protectedKeys = _ref.protectedKeys,\n      needsAnimating = _ref.needsAnimating;\n  var shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n  needsAnimating[key] = false;\n  return shouldBlock;\n}\n\nfunction animateTarget(visualElement, targetAndTransition) {\n  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref2$delay = _ref2.delay,\n      delay = _ref2$delay === void 0 ? 0 : _ref2$delay,\n      transitionOverride = _ref2.transitionOverride,\n      type = _ref2.type;\n\n  var _a;\n\n  var _targetAndTransition$ = targetAndTransition.transition,\n      transition = _targetAndTransition$ === void 0 ? visualElement.getDefaultTransition() : _targetAndTransition$,\n      transitionEnd = targetAndTransition.transitionEnd,\n      target = _objectWithoutProperties(targetAndTransition, _excluded);\n\n  var willChange = visualElement.getValue(\"willChange\");\n  if (transitionOverride) transition = transitionOverride;\n  var animations = [];\n  var animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];\n\n  var _loop = function _loop(key) {\n    var value = visualElement.getValue(key, (_a = visualElement.latestValues[key]) !== null && _a !== void 0 ? _a : null);\n    var valueTarget = target[key];\n\n    if (valueTarget === undefined || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {\n      return \"continue\";\n    }\n\n    var valueTransition = _objectSpread({\n      delay: delay,\n      elapsed: 0\n    }, getValueTransition(transition || {}, key));\n    /**\n     * If this is the first time a value is being animated, check\n     * to see if we're handling off from an existing animation.\n     */\n\n\n    var isHandoff = false;\n\n    if (window.HandoffAppearAnimations) {\n      var appearId = getOptimisedAppearId(visualElement);\n\n      if (appearId) {\n        var elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\n\n        if (elapsed !== null) {\n          valueTransition.elapsed = elapsed;\n          isHandoff = true;\n        }\n      }\n    }\n\n    value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key) ? {\n      type: false\n    } : valueTransition, visualElement, isHandoff));\n    var animation = value.animation;\n\n    if (animation) {\n      if (isWillChangeMotionValue(willChange)) {\n        willChange.add(key);\n        animation.then(function () {\n          return willChange.remove(key);\n        });\n      }\n\n      animations.push(animation);\n    }\n  };\n\n  for (var key in target) {\n    var _ret = _loop(key);\n\n    if (_ret === \"continue\") continue;\n  }\n\n  if (transitionEnd) {\n    Promise.all(animations).then(function () {\n      frame.update(function () {\n        transitionEnd && setTarget(visualElement, transitionEnd);\n      });\n    });\n  }\n\n  return animations;\n}\n\nexport { animateTarget };","map":null,"metadata":{},"sourceType":"module"}