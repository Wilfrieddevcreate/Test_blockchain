{"ast":null,"code":"import _classCallCheck from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { extractEventInfo } from '../events/event-info.mjs';\nimport { addDomEvent } from '../events/add-dom-event.mjs';\nimport { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\nimport { noop } from '../utils/noop.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction fireSyntheticPointerEvent(name, handler) {\n  if (!handler) return;\n  var syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n  handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));\n}\n\nvar PressGesture = /*#__PURE__*/function (_Feature) {\n  _inherits(PressGesture, _Feature);\n\n  var _super = _createSuper(PressGesture);\n\n  function PressGesture() {\n    var _this;\n\n    _classCallCheck(this, PressGesture);\n\n    _this = _super.apply(this, arguments);\n    _this.removeStartListeners = noop;\n    _this.removeEndListeners = noop;\n    _this.removeAccessibleListeners = noop;\n\n    _this.startPointerPress = function (startEvent, startInfo) {\n      if (_this.isPressing) return;\n\n      _this.removeEndListeners();\n\n      var props = _this.node.getProps();\n\n      var endPointerPress = function endPointerPress(endEvent, endInfo) {\n        if (!_this.checkPressEnd()) return;\n\n        var _this$node$getProps = _this.node.getProps(),\n            onTap = _this$node$getProps.onTap,\n            onTapCancel = _this$node$getProps.onTapCancel,\n            globalTapTarget = _this$node$getProps.globalTapTarget;\n        /**\n         * We only count this as a tap gesture if the event.target is the same\n         * as, or a child of, this component's element\n         */\n\n\n        var handler = !globalTapTarget && !isNodeOrChild(_this.node.current, endEvent.target) ? onTapCancel : onTap;\n\n        if (handler) {\n          frame.update(function () {\n            return handler(endEvent, endInfo);\n          });\n        }\n      };\n\n      var removePointerUpListener = addPointerEvent(window, \"pointerup\", endPointerPress, {\n        passive: !(props.onTap || props[\"onPointerUp\"])\n      });\n      var removePointerCancelListener = addPointerEvent(window, \"pointercancel\", function (cancelEvent, cancelInfo) {\n        return _this.cancelPress(cancelEvent, cancelInfo);\n      }, {\n        passive: !(props.onTapCancel || props[\"onPointerCancel\"])\n      });\n      _this.removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener);\n\n      _this.startPress(startEvent, startInfo);\n    };\n\n    _this.startAccessiblePress = function () {\n      var handleKeydown = function handleKeydown(keydownEvent) {\n        if (keydownEvent.key !== \"Enter\" || _this.isPressing) return;\n\n        var handleKeyup = function handleKeyup(keyupEvent) {\n          if (keyupEvent.key !== \"Enter\" || !_this.checkPressEnd()) return;\n          fireSyntheticPointerEvent(\"up\", function (event, info) {\n            var _this$node$getProps2 = _this.node.getProps(),\n                onTap = _this$node$getProps2.onTap;\n\n            if (onTap) {\n              frame.postRender(function () {\n                return onTap(event, info);\n              });\n            }\n          });\n        };\n\n        _this.removeEndListeners();\n\n        _this.removeEndListeners = addDomEvent(_this.node.current, \"keyup\", handleKeyup);\n        fireSyntheticPointerEvent(\"down\", function (event, info) {\n          _this.startPress(event, info);\n        });\n      };\n\n      var removeKeydownListener = addDomEvent(_this.node.current, \"keydown\", handleKeydown);\n\n      var handleBlur = function handleBlur() {\n        if (!_this.isPressing) return;\n        fireSyntheticPointerEvent(\"cancel\", function (cancelEvent, cancelInfo) {\n          return _this.cancelPress(cancelEvent, cancelInfo);\n        });\n      };\n\n      var removeBlurListener = addDomEvent(_this.node.current, \"blur\", handleBlur);\n      _this.removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);\n    };\n\n    return _this;\n  }\n\n  _createClass(PressGesture, [{\n    key: \"startPress\",\n    value: function startPress(event, info) {\n      this.isPressing = true;\n\n      var _this$node$getProps3 = this.node.getProps(),\n          onTapStart = _this$node$getProps3.onTapStart,\n          whileTap = _this$node$getProps3.whileTap;\n      /**\n       * Ensure we trigger animations before firing event callback\n       */\n\n\n      if (whileTap && this.node.animationState) {\n        this.node.animationState.setActive(\"whileTap\", true);\n      }\n\n      if (onTapStart) {\n        frame.postRender(function () {\n          return onTapStart(event, info);\n        });\n      }\n    }\n  }, {\n    key: \"checkPressEnd\",\n    value: function checkPressEnd() {\n      this.removeEndListeners();\n      this.isPressing = false;\n      var props = this.node.getProps();\n\n      if (props.whileTap && this.node.animationState) {\n        this.node.animationState.setActive(\"whileTap\", false);\n      }\n\n      return !isDragActive();\n    }\n  }, {\n    key: \"cancelPress\",\n    value: function cancelPress(event, info) {\n      if (!this.checkPressEnd()) return;\n\n      var _this$node$getProps4 = this.node.getProps(),\n          onTapCancel = _this$node$getProps4.onTapCancel;\n\n      if (onTapCancel) {\n        frame.postRender(function () {\n          return onTapCancel(event, info);\n        });\n      }\n    }\n  }, {\n    key: \"mount\",\n    value: function mount() {\n      var props = this.node.getProps();\n      var removePointerListener = addPointerEvent(props.globalTapTarget ? window : this.node.current, \"pointerdown\", this.startPointerPress, {\n        passive: !(props.onTapStart || props[\"onPointerStart\"])\n      });\n      var removeFocusListener = addDomEvent(this.node.current, \"focus\", this.startAccessiblePress);\n      this.removeStartListeners = pipe(removePointerListener, removeFocusListener);\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {\n      this.removeStartListeners();\n      this.removeEndListeners();\n      this.removeAccessibleListeners();\n    }\n  }]);\n\n  return PressGesture;\n}(Feature);\n\nexport { PressGesture };","map":null,"metadata":{},"sourceType":"module"}