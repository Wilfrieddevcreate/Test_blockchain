{"ast":null,"code":"import _classCallCheck from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\nimport { Feature } from '../Feature.mjs';\n\nvar AnimationFeature = /*#__PURE__*/function (_Feature) {\n  _inherits(AnimationFeature, _Feature);\n\n  var _super = _createSuper(AnimationFeature);\n\n  /**\n   * We dynamically generate the AnimationState manager as it contains a reference\n   * to the underlying animation library. We only want to load that if we load this,\n   * so people can optionally code split it out using the `m` component.\n   */\n  function AnimationFeature(node) {\n    var _this;\n\n    _classCallCheck(this, AnimationFeature);\n\n    _this = _super.call(this, node);\n    node.animationState || (node.animationState = createAnimationState(node));\n    return _this;\n  }\n\n  _createClass(AnimationFeature, [{\n    key: \"updateAnimationControlsSubscription\",\n    value: function updateAnimationControlsSubscription() {\n      var _this$node$getProps = this.node.getProps(),\n          animate = _this$node$getProps.animate;\n\n      this.unmount();\n\n      if (isAnimationControls(animate)) {\n        this.unmount = animate.subscribe(this.node);\n      }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */\n\n  }, {\n    key: \"mount\",\n    value: function mount() {\n      this.updateAnimationControlsSubscription();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this$node$getProps2 = this.node.getProps(),\n          animate = _this$node$getProps2.animate;\n\n      var _ref = this.node.prevProps || {},\n          prevAnimate = _ref.animate;\n\n      if (animate !== prevAnimate) {\n        this.updateAnimationControlsSubscription();\n      }\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {}\n  }]);\n\n  return AnimationFeature;\n}(Feature);\n\nexport { AnimationFeature };","map":null,"metadata":{},"sourceType":"module"}