{"ast":null,"code":"import { scrollInfo } from './track.mjs';\nimport { observeTimeline } from './observe.mjs';\nimport { supportsScrollTimeline } from './supports.mjs';\n\nfunction scrollTimelineFallback(_ref) {\n  var source = _ref.source,\n      _ref$axis = _ref.axis,\n      axis = _ref$axis === void 0 ? \"y\" : _ref$axis;\n  // ScrollTimeline records progress as a percentage CSSUnitValue\n  var currentTime = {\n    value: 0\n  };\n  var cancel = scrollInfo(function (info) {\n    currentTime.value = info[axis].progress * 100;\n  }, {\n    container: source,\n    axis: axis\n  });\n  return {\n    currentTime: currentTime,\n    cancel: cancel\n  };\n}\n\nvar timelineCache = new Map();\n\nfunction getTimeline() {\n  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref2$source = _ref2.source,\n      source = _ref2$source === void 0 ? document.documentElement : _ref2$source,\n      _ref2$axis = _ref2.axis,\n      axis = _ref2$axis === void 0 ? \"y\" : _ref2$axis;\n\n  if (!timelineCache.has(source)) {\n    timelineCache.set(source, {});\n  }\n\n  var elementCache = timelineCache.get(source);\n\n  if (!elementCache[axis]) {\n    elementCache[axis] = supportsScrollTimeline() ? new ScrollTimeline({\n      source: source,\n      axis: axis\n    }) : scrollTimelineFallback({\n      source: source,\n      axis: axis\n    });\n  }\n\n  return elementCache[axis];\n}\n\nfunction scroll(onScroll, options) {\n  var timeline = getTimeline(options);\n\n  if (typeof onScroll === \"function\") {\n    return observeTimeline(onScroll, timeline);\n  } else {\n    return onScroll.attachTimeline(timeline);\n  }\n}\n\nexport { scroll };","map":null,"metadata":{},"sourceType":"module"}