{"ast":null,"code":"import _slicedToArray from \"C:/Users/wilfr/OneDrive/Documents/maxitapbotlatestversionv2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { invariant } from '../../../utils/errors.mjs';\nimport { isNumericalString } from '../../../utils/is-numerical-string.mjs';\nimport { isCSSVariableToken } from './is-css-variable.mjs';\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\n\nvar splitCSSVariableRegex = // eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive, as it can match a lot of words\n/^var\\(\\x2D\\x2D(?:([\\x2D0-9A-Z_a-z]+)|([\\x2D0-9A-Z_a-z]+), ?([ #%\\(\\),-\\.0-9A-Za-z]+))\\)/;\n\nfunction parseCSSVariable(current) {\n  var match = splitCSSVariableRegex.exec(current);\n  if (!match) return [,];\n\n  var _match = _slicedToArray(match, 4),\n      token1 = _match[1],\n      token2 = _match[2],\n      fallback = _match[3];\n\n  return [\"--\".concat(token1 !== null && token1 !== void 0 ? token1 : token2), fallback];\n}\n\nvar maxDepth = 4;\n\nfunction getVariableValue(current, element) {\n  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  invariant(depth <= maxDepth, \"Max CSS variable fallback depth detected in property \\\"\".concat(current, \"\\\". This may indicate a circular fallback dependency.\"));\n\n  var _parseCSSVariable = parseCSSVariable(current),\n      _parseCSSVariable2 = _slicedToArray(_parseCSSVariable, 2),\n      token = _parseCSSVariable2[0],\n      fallback = _parseCSSVariable2[1]; // No CSS variable detected\n\n\n  if (!token) return; // Attempt to read this CSS variable off the element\n\n  var resolved = window.getComputedStyle(element).getPropertyValue(token);\n\n  if (resolved) {\n    var trimmed = resolved.trim();\n    return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;\n  }\n\n  return isCSSVariableToken(fallback) ? getVariableValue(fallback, element, depth + 1) : fallback;\n}\n\nexport { getVariableValue, parseCSSVariable };","map":null,"metadata":{},"sourceType":"module"}