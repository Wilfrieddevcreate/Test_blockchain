{"ast":null,"code":"import CanceledError from \"../cancel/CanceledError.js\";\nimport AxiosError from \"../core/AxiosError.js\";\n\nvar composeSignals = function composeSignals(signals, timeout) {\n  var controller = new AbortController();\n  var aborted;\n\n  var onabort = function onabort(cancel) {\n    if (!aborted) {\n      aborted = true;\n      unsubscribe();\n      var err = cancel instanceof Error ? cancel : this.reason;\n      controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));\n    }\n  };\n\n  var timer = timeout && setTimeout(function () {\n    onabort(new AxiosError(\"timeout \".concat(timeout, \" of ms exceeded\"), AxiosError.ETIMEDOUT));\n  }, timeout);\n\n  var unsubscribe = function unsubscribe() {\n    if (signals) {\n      timer && clearTimeout(timer);\n      timer = null;\n      signals.forEach(function (signal) {\n        signal && (signal.removeEventListener ? signal.removeEventListener('abort', onabort) : signal.unsubscribe(onabort));\n      });\n      signals = null;\n    }\n  };\n\n  signals.forEach(function (signal) {\n    return signal && signal.addEventListener && signal.addEventListener('abort', onabort);\n  });\n  var signal = controller.signal;\n  signal.unsubscribe = unsubscribe;\n  return [signal, function () {\n    timer && clearTimeout(timer);\n    timer = null;\n  }];\n};\n\nexport default composeSignals;","map":null,"metadata":{},"sourceType":"module"}